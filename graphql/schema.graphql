scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


type Query {
    #usersشش
    users(job: String @where(operator: "=")): [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User! @find(model: "App\\User")
    me: User! @auth @middleware(checks: ["auth:api"])
    myBids: [Bid] @field(resolver: "App\\GraphQL\\Queries\\MyBids") @middleware(checks: ["auth:api"])
    myBid(product_id: Int!): Bid @field(resolver: "App\\GraphQL\\Queries\\MyBid") @middleware(checks: ["auth:api"])
    #sliders
    sliders: [Slider!] @all
    #categories
    categories: [Category!] @all
    category(id: ID! @eq): Category! @find
    detail(id: ID! @eq): Detail! @find
    # posts
    posts: [Post!] @paginate
    post(id: ID! @eq): Post! @find(model: "App\\Post")
    # page
    page(slug: String! @where(operator: "=")): Page @find(model: "App\\Page")

    #countries
    countries: [Country!] @all
    #products
    products(category_id: Int @where(operator: "=")): [Product!]! @paginate(type: "paginator" model: "App\\Product")
    product(id:ID! @eq): Product! @find
    #ticket
    ticketComments(id: Int! @where(operator: "=")): Ticket @find @middleware(checks: ["auth:api"])
    #favorits
    myFavortis: [Favorit] @field(resolver: "App\\GraphQL\\Queries\\Favorit") @middleware(checks: ["auth:api"])
    #ads
    ads: [Ads] @all
    ad: Ads @field(resolver: "App\\GraphQL\\Queries\\Ads")
}


type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(
        name: String! @rules(apply: ["required", "string"])
        email: String! @rules(apply: ["required", "email","unique:users,email"])
        phone: String! @rules(apply: ["required", "string","unique:users,phone"])
        country_code: String! @rules(apply: ["required", "string"])
        password: String! @rules(apply: ["required", "confirmed", "min:8"])
        password_confirmation: String!
    ): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    #account settings
    account(
        id: ID!,
        email: String!,
        name: String! ,
        username: String!,
        phone: String!  ,
        country_code: String!,
    ) : User! @field(resolver: "App\\GraphQL\\Mutations\\Account@update") @middleware(checks: ["auth:api"]) @updateUserValidation
    avatar(
        avatar: Upload! @rules(apply: ["required", "image"])
    ) : User! @field(resolver: "App\\GraphQL\\Mutations\\Account@avatar") @middleware(checks: ["auth:api"])
    changePassword(
        current_password: String! @rules(apply: ["required", "string"])
        password: String! @rules(apply: ["required", "string"])
    ) : User! @field(resolver: "App\\GraphQL\\Mutations\\Account@password") @middleware(checks: ["auth:api"])
    # verification
    sendSmsVerification : Verification! @field(resolver: "App\\GraphQL\\Mutations\\SmsVerify@send") @middleware(checks: ["auth:api"])
    SmsVerification(code: String!) : User! @field(resolver: "App\\GraphQL\\Mutations\\SmsVerify@verify") @middleware(checks: ["auth:api"])
    # email verification
    sendEmailVerification : Verification! @field(resolver: "App\\GraphQL\\Mutations\\EmailVerify@send") @middleware(checks: ["auth:api"])
    EmailVerification(code: String!) : User! @field(resolver: "App\\GraphQL\\Mutations\\EmailVerify@verify") @middleware(checks: ["auth:api"])
    # Product
    newProduct(
        category: Int!
        name: String!
        description: String!
        images: [Upload!]!
        price: Float!
        min_increment: Float!
        status: String!
        features: String!
        close_time: Date!
        ) : Product! @field(resolver: "App\\GraphQL\\Mutations\\Product@new") @middleware(checks: ["auth:api"])
    updateProduct(
        id: ID!
        name: String!
        description: String!
        images: [Upload!]
        price: Float!
        min_increment: Float!
        status: String!
        features: String!
        close_time: Date!
        ) : Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Product@update") @middleware(checks: ["auth:api"])
    deleteProduct(id: ID!) : Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Product@delete") @middleware(checks: ["auth:api"])
    deleteProductImage(id: ID!,image:String!) : Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Product@deleteImage") @middleware(checks: ["auth:api"])
    #Bid
    BidIncrease(product_id:Int,increase: Float) : Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Bid@increase") @middleware(checks: ["auth:api"])
    #payment
    payment(product_id: ID!): String! @field(resolver: "App\\GraphQL\\Mutations\\Payment@pay") @middleware(checks: ["auth:api"])
    checkPayment(payment_id: ID!): String! @field(resolver: "App\\GraphQL\\Mutations\\Payment@check") @middleware(checks: ["auth:api"])
    #ticket
    newTicket(subject: String!, priority: String!,message: String!,attachments: [Upload]): Ticket @field(resolver: "App\\GraphQL\\Mutations\\Ticket@new") @middleware(checks: ["auth:api"])
    newComment(ticket_id: Int!, comment: String!,attachments: [Upload]): TicketComment @field(resolver: "App\\GraphQL\\Mutations\\Ticket@comment") @middleware(checks: ["auth:api"])
    # search
    search(query: String!): [Product] @field(resolver: "App\\GraphQL\\Mutations\\Search@search")
    #favorit
    addFavorit(product_id: Int!): Boolean @field(resolver: "App\\GraphQL\\Mutations\\Favorit@add") @middleware(checks: ["auth:api"])
    deleteFavorit(product_id: Int!): Boolean @field(resolver: "App\\GraphQL\\Mutations\\Favorit@delete") @middleware(checks: ["auth:api"])
}

type Verification
{
    id: ID!
    status: String!
}

type Favorit {
    id: ID
    product_id: ID
    user_id: ID
    product: Product @belongsTo
    user: User @belongsTo
}

type Ads {
    id: ID
    product_id: ID
    product: Product @belongsTo
}

type Slider {
    id: ID!
    image: String!
    title: String!
    description: String!
    link: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    avatar: String!
    username: String
    country_code: String
    email_verified_at: DateTime
    phone_verified_at: DateTime
    verified: Boolean!
    phone: String
    products: [Product] @hasMany
    bids: [Bid] @hasMany
    tickets: [Ticket] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}


type Ticket {
    id: ID!
    user: User @belongsTo
    subject: String!
    priority: String!
    message: String!
    attachments: String
    status: String!
    comments: [TicketComment] @hasMany
    created_at: DateTime
}

type  TicketComment {
    id: ID!
    user: User @belongsTo
    content: String
    user_id: Int
    attachments: String
    created_at: DateTime
}

type Country {
    id: ID!
    iso: String!
    name: String!
    nicename: String!
    iso3: String!
    phonecode: String!
}

type Category {
    id: ID!
    parent_id: Int
    name: String!
    image: String
    details: Detail @hasOne
    products: Int @count(relation: "products")
    slug: String!
    created_at: DateTime!
}

type Detail{
    id: ID
    category_id: Int
    details: String
}

type PaginatorInfo {
    count: Int!
    currentPage: Int!
    firstItem: Int
    hasMorePages: Boolean!
    lastItem: Int
    lastPage: Int!
    perPage: Int!
    total: Int!
}


type Post {
    id: ID!
    author: User @belongsTo
    title: String!
    category_id: Int!
    seo_title:String!
    excerpt: String!
    body: String!
    image: String!
    slug: String!
    meta_description: String!
    meta_keywords: String!
    status: String!
    created_at: Date
}


type Page {
    id: ID!
    author_id: User @belongsTo
    title: String
    category_id: Int
    excerpt: String
    body: String
    image: String
    slug: String
    meta_description: String
    meta_keywords: String
    status: String
}

type Product {
    id: ID!
    user: User @belongsTo
    category: Category @belongsTo
    name: String!
    description: String!
    images: String!
    price: Float!
    min_increment: Float!
    status: String!
    features: String!
    bids: Int! @count(relation: "bids")
    lastBid: [Bid] @hasOne
    close_time: DateTime!
    created_at: DateTime!
}

type Bid {
    id: ID!
    product: Product @belongsTo
    user: User @belongsTo
    increase: Float,
    price: Float,
}

